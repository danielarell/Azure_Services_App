Description: Test para chat

Parameters:
  InstanceProfileArn:
    Type: String
    Description: ARN of the autoscaling group instance profile
  BastionInstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type for the bastion hosts
    
Resources:
   # Importar la clave pública generada externamente
  ImportedKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: "public_key"  # Nombre del key pair en AWS
      PublicKeyMaterial: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCLy2dHptMDN94jchLc3Nr1HFLlNxmlenk+/fotuUvr/RQ/XZG3RmOSLiJZD0a/Xn+rirFgxT/Hy3Qhv2KfR1VYkIGB6IJhoWE+fTi92yZlUOln4E9fPl5tLWHRuTrDwPf8FoFciyJ0+JJpu0qzK+1EEzs+YKRMM1gnM+yihVnnIV3A5ymfp73ysPmwJf7Tsyx30QpkY2Fgck6XLj39X/69MYWIWldYEv3oS+ZtpHXwt6GljoQDb6snGiUbjP7Ib2FcLME5Yjy16kgv0G4ok0tMR81QkOTp8lgexOullQIvpu8BhJODyf8SESOLMmX5t4Xd9KD9vliuinXshgxwkPbR"
      Tags:
        - Key: Name
          Value: "public_key"
  # Creating the VPC
  MainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: True
      EnableDnsSupport: True
      Tags:
      - Key: Name
        Value: VPC for the final project

  # Creation and attaching of InternetGateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: MainVPC

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MainVPC
      InternetGatewayId: !Ref InternetGateway

  # Creation of Public subnet A in the Availability Zone One: us-east-1a
  FirstPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs 'us-east-1' ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Public Subnet A - From Availability Zone one
        
  # Creation of Public subnet B in the Availability Zone One: us-east-1b
  SecondPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 1, !GetAZs 'us-east-1' ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Public Subnet B - From Availability Zone two

  # Creation of Private subnet A in the Availability Zone One: us-east-1a
  FirstPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 0, !GetAZs 'us-east-1' ]
      Tags:
      - Key: Name
        Value: Private Subnet A - From Availability Zone one 

  # Creation of Private subnet B in the Availability Zone One: us-east-1a
  SecondPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 1, !GetAZs 'us-east-1' ]
      Tags:
      - Key: Name
        Value: Private Subnet B - From Availability Zone one 

  # Creation of Private subnet C in the Availability Zone One: us-east-1b
  ThirdPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 2, !GetAZs 'us-east-1' ]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: Private Subnet C - From Availability Zone two

  # Creation of Private subnet D in the Availability Zone One: us-east-1b
  FourthPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select [ 0, !GetAZs 'us-east-1' ]
      Tags:
      - Key: Name
        Value: Private Subnet D - From Availability Zone two

  #Part of creating NatGateways an elastic ip addresses

  # Elastic IP for NAT Gateway in AZ1 (us-east-1a)
  NatEIPAZ1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # NAT Gateway in Public Subnet A (us-east-1a)
  NatGatewayAZ1:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachIGW
    Properties:
      AllocationId: !GetAtt NatEIPAZ1.AllocationId
      SubnetId: !Ref FirstPublicSubnet
      Tags:
      - Key: Name
        Value: NAT Gateway in the Availability Zone One

  # Elastic IP for NAT Gateway in AZ2 (us-east-1b)
  NatEIPAZ2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # NAT Gateway in Public Subnet B (us-east-1b)
  NatGatewayAZ2:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachIGW
    Properties:
      AllocationId: !GetAtt NatEIPAZ2.AllocationId
      SubnetId: !Ref SecondPublicSubnet
      Tags:
      - Key: Name
        Value: NAT Gateway in the Availability Zone two

  #Creation of public route table and private route table

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
      - Key: Name
        Value: Public Route Table for Internet Gateway 

  # Public Route (0.0.0.0/0 to Internet Gateway)
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0 #this allow access to internet
      GatewayId: !Ref InternetGateway

  # Associations for Public Subnet A and B
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FirstPublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SecondPublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Private Route Table for AZ1 (us-east-1a)
  PrivateRouteTableAZ1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
      - Key: Name
        Value: Private Route Table in the Availability Zone One

  # Route to NAT Gateway AZ1
  PrivateRouteToNATAZ1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ1
      DestinationCidrBlock: 0.0.0.0/0 #to anywhere
      NatGatewayId: !Ref NatGatewayAZ1

  # Associate Private Subnet A and B (AZ1) with Private Route Table AZ1
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FirstPrivateSubnet
      RouteTableId: !Ref PrivateRouteTableAZ1

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SecondPrivateSubnet
      RouteTableId: !Ref PrivateRouteTableAZ1

  # Private Route Table for AZ2 (us-east-1b)
  PrivateRouteTableAZ2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
      - Key: Name
        Value: Private Route Table in the Availability Zone two

  # Route to NAT Gateway AZ2
  PrivateRouteToNATAZ2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ2
      DestinationCidrBlock: 0.0.0.0/0 #to anywhere
      NatGatewayId: !Ref NatGatewayAZ2

  # Associate Private Subnet C and D (AZ2) with Private Route Table AZ2
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ThirdPrivateSubnet
      RouteTableId: !Ref PrivateRouteTableAZ2

  PrivateSubnetDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FourthPrivateSubnet
      RouteTableId: !Ref PrivateRouteTableAZ2


  #security group creation to allow via SSH connection to the EC2's, Aquí  quitaré el SSH SG
  
  # Security Group for Bastion Hosts
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Bastion Hosts
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Allowing SSH from anywhere (you might want to restrict this to your IP)
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Bastion Host Security Group

  # Security Group for Private Instances (only allows SSH from Bastion Hosts)
  PrivateInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for private instances
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup  # Allowing SSH only from Bastion Hosts
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Private Instance Security Group

  # NUEVO: Security Group para permitir tráfico HTTP al Load Balancer
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access to ALB
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB Security Group for HTTP access

  # NUEVO: Security Group para permitir tráfico HTTP desde el ALB a las instancias EC2
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access from ALB to EC2 instances
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: Web Server Security Group for HTTP access from ALB

#------------------------------------------------RDS--------------------------------------
  

  # Bastion Host in Public Subnet A (AZ1)
  BastionHostAZ1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref BastionInstanceType
      ImageId:  ami-00ca32bbc84273381
      KeyName: !Ref ImportedKeyPair
      SubnetId: !Ref FirstPublicSubnet
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: Bastion Host - AZ1
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          # Install useful tools for the bastion host
          yum install -y htop tmux vim
          
          # Configure SSH to hold connections open
          echo "ClientAliveInterval 60" >> /etc/ssh/sshd_config
          echo "ClientAliveCountMax 120" >> /etc/ssh/sshd_config
          
          # Restart SSH service
          systemctl restart sshd
          
          # Create SSH config for easier access to private instances
          mkdir -p /home/ec2-user/.ssh
          cat > /home/ec2-user/.ssh/config << 'EOF'
          Host private-*
              User ec2-user
              IdentityFile ~/.ssh/id_rsa
              StrictHostKeyChecking no
              UserKnownHostsFile /dev/null
          EOF
          
          chown -R ec2-user:ec2-user /home/ec2-user/.ssh
          chmod 600 /home/ec2-user/.ssh/config
            
  # Bastion Host in Public Subnet B (AZ2)
  BastionHostAZ2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref BastionInstanceType
      ImageId: ami-00ca32bbc84273381
      KeyName: !Ref ImportedKeyPair
      SubnetId: !Ref SecondPublicSubnet
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: Bastion Host - AZ2
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          # Install useful tools for the bastion host
          yum install -y htop tmux vim
          
          # Configure SSH to hold connections open
          echo "ClientAliveInterval 60" >> /etc/ssh/sshd_config
          echo "ClientAliveCountMax 120" >> /etc/ssh/sshd_config
          
          # Restart SSH service
          systemctl restart sshd
          
          # Create SSH config for easier access to private instances
          mkdir -p /home/ec2-user/.ssh
          cat > /home/ec2-user/.ssh/config << 'EOF'
          Host private-*
              User ec2-user
              IdentityFile ~/.ssh/id_rsa
              StrictHostKeyChecking no
              UserKnownHostsFile /dev/null
          EOF
          
          chown -R ec2-user:ec2-user /home/ec2-user/.ssh
          chmod 600 /home/ec2-user/.ssh/config

#------------------------------------------------EC2_TEMPLATE-----------------------------------------------
        #
  LaunchTemplateEc2Micro:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        ImageId: ami-00ca32bbc84273381
        InstanceType: t3.micro
        KeyName: !Ref ImportedKeyPair
        IamInstanceProfile: 
          Arn: !Ref InstanceProfileArn
        SecurityGroupIds:
          - !Ref WebServerSecurityGroup
          - !Ref PrivateInstanceSecurityGroup  # Add this to allow SSH from bastion hosts

        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              yum update -y
              yum install -y awscli jq mariadb105 php httpd php-mysqli unzip

              systemctl start httpd
              systemctl enable httpd
            
              echo "<h1>el titulo </h1>" > /var/www/html/index.html

              chown -R apache:apache /var/www/html/
              chmod -R 755 /var/www/html/

              systemctl restart httpd
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: environment
            Value: development
        - ResourceType: volume
          Tags:
          - Key: environment
            Value: development



#---------------------------------  IncomingTargetGroup --------------------------

  IncomingTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: incoming-target-group
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MainVPC
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health.html  # 
      HealthCheckIntervalSeconds: 30  #
      HealthCheckTimeoutSeconds: 5   #
      HealthyThresholdCount: 2       #
      UnhealthyThresholdCount: 2     #
      Matcher:
        HttpCode: 200


#---------------------------------  LoadBalancerListener --------------------------
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref IncomingTargetGroup
      LoadBalancerArn: !Ref IncomingTrafficLoadBalancer
      Port: 80
      Protocol: HTTP

#---------------------------------  Application Load Balancer --------------------------
  IncomingTrafficLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: IncomingTrafficLoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup  # AQUÍ: Añadir referencia al Security Group nuevo
      Subnets: 
        - !Ref FirstPublicSubnet
        - !Ref SecondPublicSubnet
      Type: application


#----- AutoScaling policy
  TargetTrackingASP:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: String
      AutoScalingGroupName: !Ref WebServerASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration: 
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Join 
            - '/' 
            - - !GetAtt IncomingTrafficLoadBalancer.LoadBalancerFullName
              - !GetAtt IncomingTargetGroup.TargetGroupFullName
        TargetValue: 1000
            


#--------------------------------------Auto Scaling Group-------------------------------
  WebServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: LaunchTemplateEc2Micro
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-ASG
      AvailabilityZones: 
        - "us-east-1a"
        - "us-east-1b"
      DefaultInstanceWarmup: 0
      DesiredCapacity: 1
      #DesiredCapacityType: vcpu
      LaunchTemplate: 
        LaunchTemplateId: !Ref LaunchTemplateEc2Micro
        Version: !GetAtt LaunchTemplateEc2Micro.LatestVersionNumber
      MaxSize: 1
      MinSize: 1
      NewInstancesProtectedFromScaleIn: false
      #PlacementGroup: String
      #ServiceLinkedRoleARN: String
      #Tags: 
        #- TagProperty
      TargetGroupARNs: 
        - !Ref IncomingTargetGroup
      VPCZoneIdentifier:
      - !Ref FirstPrivateSubnet
      - !Ref SecondPrivateSubnet

Outputs:
  VPCID:
    Description: ID de la VPC creada
    Value: !Ref MainVPC
    
  ASGName:
    Description: Nombre del Auto Scaling Group
    Value: !Ref WebServerASG

  LaunchTemplateName:
    Description: Nombre del Launch Template
    Value: !Ref LaunchTemplateEc2Micro


  LoadBalancerDNS:
    Description: "DNS del Load Balancer para acceder a la aplicación web"
    Value: !GetAtt IncomingTrafficLoadBalancer.DNSName

  KeyPairName:
    Description: Nombre del Key Pair importado para SSH
    Value: !Ref ImportedKeyPair
    
  BastionHostAZ1IP:
    Description: Public IP address of the Bastion Host in AZ1
    Value: !GetAtt BastionHostAZ1.PublicIp
  
  BastionHostAZ2IP:
    Description: Public IP address of the Bastion Host in AZ2
    Value: !GetAtt BastionHostAZ2.PublicIp



